"use client";

import RenderSongList from "@/components/cards/renderSongList";
import RenderPlayList from "@/components/cards/renderPlayList";
import { mockExplorePlaylistData, mockExploreSongData } from "@/mock/exploreData";
import React from "react";

export default function ExploreCategoryPage({
  params,
}: {
  params: Promise<{ category: string }>;
}) {
  const { category } = React.use(params);

  // üîç L·∫•y d·ªØ li·ªáu t·ª´ file mock d·ª±a tr√™n slug
  const sectionSong = mockExploreSongData.find((s) => s.slug === category);
  const sectionPlaylist = mockExplorePlaylistData.find((s) => s.slug === category);

  // N·∫øu kh√¥ng t·ªìn t·∫°i slug
  if (!sectionSong && !sectionPlaylist) {
    return <div className="p-8">Kh√¥ng t√¨m th·∫•y danh m·ª•c</div>;
  }

  // N·∫øu l√† ph·∫ßn Playlist
  if (sectionPlaylist && category === "top100-playlists") {
    return (
      <div className="p-8">
        <h1 className="text-2xl font-bold mb-4">{sectionPlaylist.title}</h1>
        <div className="flex flex-col gap-4">
          {sectionPlaylist.items.map((playlist) => (
            <RenderPlayList key={playlist.id} playlist={playlist} />
          ))}
        </div>
      </div>
    );
  }

  // Ng∆∞·ª£c l·∫°i l√† ph·∫ßn Songs
  if (sectionSong) {
    return (
      <div className="p-8">
        <h1 className="text-2xl font-bold mb-4">{sectionSong.title}</h1>
        <div className="flex flex-col gap-4">
          {sectionSong.items.map((song) => (
            <RenderSongList key={song.id} song={song} />
          ))}
        </div>
      </div>
    );
  }

  // Tr∆∞·ªùng h·ª£p c√≤n l·∫°i (kh√¥ng kh·ªõp)
  return <div className="p-8">Kh√¥ng t√¨m th·∫•y danh m·ª•c</div>;
}
